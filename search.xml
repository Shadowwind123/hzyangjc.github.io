<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>传球游戏【NOIP2008普及组】</title>
      <link href="/2018/08/22/%E4%BC%A0%E7%90%83%E6%B8%B8%E6%88%8F/"/>
      <url>/2018/08/22/%E4%BC%A0%E7%90%83%E6%B8%B8%E6%88%8F/</url>
      <content type="html"><![CDATA[<h4 id="洛谷P1057题目链接"><a href="#洛谷P1057题目链接" class="headerlink" title="洛谷P1057题目链接"></a><a href="https://www.luogu.org/problemnew/show/P1057" target="_blank" rel="noopener">洛谷P1057题目链接</a></h4><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>上体育课的时候，小蛮的老师经常带着同学们一起做游戏。这次，老师带着同学们一起做传球游戏。</p><p>游戏规则是这样的： nn 个同学站成一个圆圈，其中的一个同学手里拿着一个球，当老师吹哨子时开始传球，每个同学可以把球传给自己左右的两个同学中的一个（左右任意），当老师再次吹哨子时，传球停止，此时，拿着球没有传出去的那个同学就是败者，要给大家表演一个节目。</p><p>聪明的小蛮提出一个有趣的问题：有多少种不同的传球方法可以使得从小蛮手里开始传的球，传了m次以后，又回到小蛮手里。两种传球方法被视作不同的方法，当且仅当这两种方法中，接到球的同学按接球顺序组成的序列是不同的。比如有三个同学 1 号、2 号、3 号，并假设小蛮为 1 号，球传了 3 次回到小蛮手里的方式有<code>1 -&gt; 2 -&gt; 3 -&gt; 1</code> 和<code>1 -&gt; 3 -&gt; 2 -&gt; 1</code>，共 2 种。</p><h2 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h2><ul><li>输入格式：<br> 一行，有两个用空格隔开的整数n,m(3≤n≤30,1≤m≤30) 。</li><li>输出格式：<br> 11 个整数，表示符合题意的方法数。</li></ul><h2 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h2><ul><li>输入样例#1： </li></ul><p><code>3 3</code></p><ul><li>输出样例#1： </li></ul><p><code>2</code></p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>40%的数据满足：3≤n≤30,1≤m≤20</p><p>100%的数据满足：3≤n≤30,1≤m≤30</p><p><strong>2008普及组第三题</strong></p><p><strong>难度：普及/提高-</strong></p><hr><h2 id="踩坑记"><a href="#踩坑记" class="headerlink" title="踩坑记"></a>踩坑记</h2><p><img src="http://wx4.sinaimg.cn/mw690/0060lm7Tly1fsak5rti8zg306y06y45f.gif" alt="img"></p><p>一拿到这题，就想起了lijian大佬说的<strong>拿到题不是水题就先想搜索</strong>，花一刻钟飞速打了一份dfs，结果不出所料，拿到了第一级数据的40分，其余超时。</p><p>dfs算法简陋，注释不多，见代码。</p><p>40分code：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;                      <span class="comment">//共有ans个符合要求的方法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> cnt)</span>         <span class="comment">//目前是第x个人，已经传了cnt次</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cnt==m)                  <span class="comment">//次数已达到，进行判断</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">1</span>)</span><br><span class="line">            ans++;              <span class="comment">//当前球在小蛮手中，符合要求的方法+1</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cnt=<span class="number">0</span>;              <span class="comment">//不然重新开始</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x<span class="number">-1</span>&lt;<span class="number">1</span>) dfs(n,cnt+<span class="number">1</span>);      <span class="comment">//下一个走起</span></span><br><span class="line">    <span class="keyword">else</span> dfs(x<span class="number">-1</span>,cnt+<span class="number">1</span>);         <span class="comment">//一个走起</span></span><br><span class="line">    <span class="keyword">if</span>(x+<span class="number">1</span>&gt;n) dfs(<span class="number">1</span>,cnt+<span class="number">1</span>);      <span class="comment">//个走起</span></span><br><span class="line">    <span class="keyword">else</span> dfs(x+<span class="number">1</span>,cnt+<span class="number">1</span>);         <span class="comment">//走起</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);                   <span class="comment">//从小蛮开始，0次开始</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="AC算法"><a href="#AC算法" class="headerlink" title="AC算法"></a>AC算法</h2><p><strong>大名腚腚的迪屁</strong></p><p>具体思路见代码</p><p>AC code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">31</span>][<span class="number">31</span>];                      <span class="comment">//f[i][j]表示第i轮时j号被传到的可能数 </span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">left</span><span class="params">(<span class="keyword">int</span> x)</span>              <span class="comment">//x号左边的人</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x--;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">1</span>) x=n;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">right</span><span class="params">(<span class="keyword">int</span> x)</span>             <span class="comment">//x号右边的人</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x++;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;n) x=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    f[<span class="number">1</span>][<span class="number">2</span>]=f[<span class="number">1</span>][n]=<span class="number">1</span>;              <span class="comment">//传第一次：右边的2号和左边的n号设为1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=m;i++)           <span class="comment">//从第二次开始算</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            f[i][j]=f[i<span class="number">-1</span>][left(j)]+f[i<span class="number">-1</span>][right(j)];</span><br><span class="line">                                   <span class="comment">//第i轮时j号被传到的可能数等于i-1轮是其左侧和右侧的传到的可能数</span></span><br><span class="line">                                   <span class="comment">//之和，因为j号的球只能从其左侧或右侧而来</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,f[m][<span class="number">1</span>]);          <span class="comment">//第m轮小蛮被传到的可能数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;                       <span class="comment">//AC</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 动规 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>合唱队形【NOIP2004提高组】</title>
      <link href="/2018/08/22/%E5%90%88%E5%94%B1%E9%98%9F%E5%BD%A2/"/>
      <url>/2018/08/22/%E5%90%88%E5%94%B1%E9%98%9F%E5%BD%A2/</url>
      <content type="html"><![CDATA[<h4 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a><a href="https://www.luogu.org/problemnew/show/P1091" target="_blank" rel="noopener">题目链接</a></h4><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>N 位同学站成一排，音乐老师要请其中的( N−K )位同学出列，使得剩下的 KK 位同学排成合唱队形。</p><p>合唱队形是指这样的一种队形：设K位同学从左到右依次编号为 1,2,…,K ，他们的身高分别为T1,T2,…,TK ， 则他们的身高满足T1&lt;…<ti>Ti+1&gt;…&gt;TK(1≤i≤K) 。</ti></p><p>你的任务是，已知所有N位同学的身高，计算最少需要几位同学出列，可以使得剩下的同学排成合唱队形。</p><h2 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h2><ul><li>输入格式：</li></ul><p>共二行。</p><p>第一行是一个整数N(2≤N≤100) ，表示同学的总数。</p><p>第二行有 n 个整数，用空格分隔，第 i 个整数 Ti(130≤Ti≤230) 是第 ii 位同学的身高(厘米)。</p><ul><li>输出格式：</li></ul><p>一个整数，最少需要几位同学出列。</p><h2 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h2><p>输入样例#1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">186 186 150 200 160 130 197 220</span><br></pre></td></tr></table></figure><p>输出样例#1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ol><li>对于50％的数据，保证有 n \le 20n≤20 ；</li><li>对于全部的数据，保证有 n \le 100n≤100 。</li></ol><hr><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>先用最长上升子序列求一遍，存在<code>high</code>数组里，再用最长下降子序列求一遍，存在<code>low</code>数组里。</p><p><strong>重点：第x个人为队形中最高者时，队形的最大长度=x及其左侧的最长上升子序列长度+x及其右侧的最长下降子序列长度-1（x被算了两次）。</strong>这点理解了，题目就不难了。</p><p>注意求的是出列人数，所以最后勿忘用n减。<strong>这是我连交三次都20分的原因(ಥ﹏ಥ)</strong></p><p>AC code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">101</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[MAXN];</span><br><span class="line"><span class="keyword">int</span> high[MAXN],low[MAXN];</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="comment">//求整个序列中每个元素及其左侧的</span></span><br><span class="line">&#123;   <span class="comment">//最长上升子序列长度</span></span><br><span class="line">high[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;j++)</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;a[j])</span><br><span class="line">high[i]=max(high[i],high[j]+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;<span class="number">0</span>;i--)<span class="comment">//求整个序列中每个元素及其右侧的</span></span><br><span class="line">&#123;   <span class="comment">//最长下降子序列长度</span></span><br><span class="line">low[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=n;j&gt;i;j--)</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;a[j])</span><br><span class="line">low[i]=max(low[i],low[j]+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="comment">//找到最长队形</span></span><br><span class="line">ans=max(ans,high[i]+low[i]<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n-ans);<span class="comment">//用n减！！！</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 动规 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数的计算【NOIP2001普及组】</title>
      <link href="/2018/08/21/%E6%95%B0%E7%9A%84%E8%AE%A1%E6%95%B0-%E4%BA%94%E7%A7%8D%E8%A7%A3%E6%B3%95%E3%80%90NOIP2001%E6%99%AE%E5%8F%8A%E7%BB%84%E3%80%91/"/>
      <url>/2018/08/21/%E6%95%B0%E7%9A%84%E8%AE%A1%E6%95%B0-%E4%BA%94%E7%A7%8D%E8%A7%A3%E6%B3%95%E3%80%90NOIP2001%E6%99%AE%E5%8F%8A%E7%BB%84%E3%80%91/</url>
      <content type="html"><![CDATA[<p><strong><a href="https://www.luogu.org/problemnew/show/P1028" target="_blank" rel="noopener">题目链接</a></strong></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>我们要求找出具有下列性质数的个数(包含输入的自然数 nn ):</p><p>先输入一个自然数 n(n≤1000),然后对此自然数按照如下方法进行处理:</p><ol><li>不作任何处理;</li><li>在它的左边加上一个自然数,但该自然数不能超过原数的一半;</li><li>加上数后,继续按此规则进行处理,直到不能再加自然数为止.</li></ol><h3 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h3><p>输入格式：</p><p>1 个自然数 n (n≤1000 )</p><p>输出格式：</p><p>1 个整数，表示具有该性质数的个数。</p><h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><p>输入样例#1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><p>输出样例#1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>满足条件的数为</p><p>6，16，26，126，36，136</p><hr><h1 id="来，上车！"><a href="#来，上车！" class="headerlink" title="来，上车！"></a>来，上车！</h1><p>这题不难，但值得深究。</p><p>是的，我想出了<strong>五种方法</strong>。</p><h3 id="方法一-递归"><a href="#方法一-递归" class="headerlink" title="方法一  递归"></a>方法一  递归</h3><p>用<strong>递归</strong>，f(n)=1+f(1)+f(2)+……+f(n/2),当n较大时会超时，时间为指数级。</p><p>代码-<strong>超时</strong>：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> m)</span> <span class="comment">//统计m所扩展出的数据个数 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">ans++;<span class="comment">//每出现一个原数，累加器加1</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m/<span class="number">2</span>;i++)   <span class="comment">//左边添加不超过原数一半的自然数，作为新原数 </span></span><br><span class="line">dfs(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">dfs(n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="方法二-记忆化搜索"><a href="#方法二-记忆化搜索" class="headerlink" title="方法二  记忆化搜索"></a>方法二  记忆化搜索</h3><p>用<strong>记忆化搜索</strong>，实际上是对方法一的改进。设h[i]表示自然数i满足题意三个条件的数的个数。若用递归求解，会重复来求一些子问题。例如在求h[4]时，需要再求h[1]和h[2]的值。现在用h数组记录在记忆求解过程中得出的所有子问题的解，当遇到重复子问题时，直接使用前面记忆的结果。</p><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> h[<span class="number">1001</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span>(h[m]!=<span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="comment">//说明前面已经求得h[m]的值，直接引用即可，无需再递归 </span></span><br><span class="line">h[m]=<span class="number">1</span>;<span class="comment">//表示m本身是一种情况 </span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m/<span class="number">2</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">dfs(i);</span><br><span class="line">h[m]+=h[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">h[i]=<span class="number">-1</span>;<span class="comment">//h数组初始化为-1 </span></span><br><span class="line">dfs(n);<span class="comment">//由顶到下记忆化递归求解 </span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;h[n];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="方法三-递推"><a href="#方法三-递推" class="headerlink" title="方法三  递推"></a>方法三  递推</h3><p>用<strong>递推</strong>，用h（n）表示自然数n所能扩展的数据个数，则h（1）=1，h（2）=2，h（3）=2，h（4）=4，h（5）=4，h（6）=6，h（7）=6，h（8）=10，h（9）=10。分析以上数据，可得递推公式：<code>h(i)=1+h(1)+h(2)+···+h(i/2)</code>。此算法时间复杂度为O(n*n)。</p><p>设h[i]-i按照规则扩展出的自然数个数(1≤i≤n)。下表列出了h[i]值及其方案：</p><table><thead><tr><th style="text-align:center">i</th><th style="text-align:center">h[i]</th><th style="text-align:left">自然数序列</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:left">1</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:left">2 12</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">2</td><td style="text-align:left">3 13</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">4</td><td style="text-align:left">4 14 24 124</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">4</td><td style="text-align:left">5 15 25 125</td></tr><tr><td style="text-align:center">……</td><td style="text-align:center">……</td><td style="text-align:left">……</td></tr><tr><td style="text-align:center">i</td><td style="text-align:center">$1+\sum_{k=1}^{[ \frac{i}{2}]}{h[k]}$</td><td style="text-align:left">i  1i  2i  12i …</td></tr></tbody></table><p>由于1为最小非零自然数，因此1无法扩展出其他自然数。自然数i(2≤i≤n)按照规则扩展出的自然数包括i；i左边加上1；左边加上2按规则扩展出的h[2]个自然数……；由于i左邻的自然数不超过[i/2]，因此直至i左边加上h[[i/2]]个自然数（这些自然数由[i/2]按规则扩展出）为止。由此得出递推的计数公式：</p><p>h[1]=1;</p><p>h[i]=$1+\sum_{k=1}^{[ \frac{i}{2}]}{h[k]}$         (2≤i≤n)</p><p>从1出发，按照上述公式递推至自然数n，便可得出n按规则扩展出的自然数个数h[n]。</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> h[<span class="number">10001</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="comment">//按递增顺序计算扩展出的自然数个数</span></span><br><span class="line">    &#123;</span><br><span class="line">        h[i]=<span class="number">1</span>;<span class="comment">//扩展出的自然数包括i本身</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i/<span class="number">2</span>;j++)<span class="comment">//i左边分别加上i···自然数[i/2]按规则扩展出</span></span><br><span class="line">        <span class="comment">//的自然数个数</span></span><br><span class="line">        h[i]+=h[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;h[n];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法四-改进方法三"><a href="#方法四-改进方法三" class="headerlink" title="方法四  改进方法三"></a>方法四  改进方法三</h3><p>对方法三的改进，定义数组s，<code>s(x)=h(1)+h(2)+···+h(x)</code>，<code>h(x)=s(x)-s(x-1)</code>，此算法的时间复杂度可降到O(n)。</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> h[<span class="number">10001</span>],s[<span class="number">10001</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        h[i]=<span class="number">1</span>+s[i/<span class="number">2</span>];</span><br><span class="line">        s[i]=s[i<span class="number">-1</span>]+h[i];<span class="comment">//s是h的前缀累加和</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;h[n];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法五-更强的递推"><a href="#方法五-更强的递推" class="headerlink" title="方法五 更强的递推"></a>方法五 更强的递推</h3><p>还是用递推，只要作仔细分析，不难发现以下的递推公式：</p><ul><li>当i为奇数时，<code>h[i]=h[i-1]</code>；</li><li>当i为偶数时，<code>h[i]=h[i-1]+h[i/2]</code>。</li></ul><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> h[<span class="number">10001</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    h[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        h[i]=h[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">            h[i]+=h[i/<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;h[n];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 递推 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>快速排序算法简析</title>
      <link href="/2018/08/21/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%AE%80%E6%9E%90/"/>
      <url>/2018/08/21/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%AE%80%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>快速排序是对冒泡排序的一种改进。它的基本思想是：通过一趟排序将待排记录分割成独立的两部分其中一部分记录的关键字均比另一部分记录的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。</p><p> 假设待排序的序列为{a[l],a[l+1],a[l+2],…,a[r]},首先任意选取一个记录（通常可选中间一个记录作为枢轴或支点），然后重新排列其余记录，将所有关键字小于它的记录都放在左子序列中，所有关键字大于它的记录都放在右子序列中。由此可以将该“支点”记录所在的位置mid作分界线，将序列分割成两个子序列和。这个过程一趟快速排序（或一次划分）。</p><p> 一趟快速排序的具体做法是：附设两个指针i和j，它们的初始值分别为1和r，设枢轴记录取mid，则首先从j所指位置起向前搜索，找到第一个关键字小于mid的记录，然后从i所指位置起向后搜索，找到第一个关键字大于mid的记录，将他们互相交换，重复这两步直至i&gt;j为止。</p><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">qsort</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p&gt;=q) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> key=a[p];</span><br><span class="line"><span class="keyword">int</span> i=p,j=q;</span><br><span class="line"><span class="keyword">while</span>(i&lt;j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(a[j]&gt;=key&amp;&amp;i&lt;j) j--;</span><br><span class="line"><span class="keyword">if</span>(i&lt;j) a[i++]=a[j];</span><br><span class="line"><span class="keyword">while</span>(a[i]&lt;=key&amp;&amp;i&lt;j) i++;</span><br><span class="line"><span class="keyword">if</span>(i&lt;j) a[j--]=a[i];</span><br><span class="line">&#125;</span><br><span class="line">a[i]=key;</span><br><span class="line">qsort(p,i<span class="number">-1</span>);</span><br><span class="line">qsort(i+<span class="number">1</span>,q);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
